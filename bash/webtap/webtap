#! /bin/bash
# Webtap - simple bookmarking system
#

VERSION="Development"
COPYRIGHT="2008-2011"
WEBTAP_LAUNCHER="$BROWSER"
WEBTAP_URLFILE="$HOME/.webtaps"
WEBTAP_CFGFILE="$HOME/.webtaprc"
WEBTAP_TEMP_DIR=/tmp
DEV_NULL=/dev/null
WEBTAP_HTML_FILE="$WEBTAP_TEMP_DIR/webtap.html"

# load parameters from user's file
if [ -f "$WEBTAP_CFGFILE" ]; then
	. "$WEBTAP_CFGFILE"
fi

load_webtapfile(){
	webtap_file="$1"
	sed -e '/^$/d; /\#/d; / / s//%REM%/g' "$webtap_file"
}

# sensible-browser-like utility (parses $WEBTAP_LAUNCHER, $BROWSER, and %s)
webtap_launcher(){
	LAUNCHER_CMD="$WEBTAP_LAUNCHER"
	LAUNCHER_URL="$1"
	if [ ! -z "$LAUNCHER_CMD" ]; then
		LAUNCHER_LIST=${LAUNCHER_CMD// /\%REM\%}
		LAUNCHER_LIST=${LAUNCHER_LIST//[\:]/ }
		for launcher in $LAUNCHER_LIST; do
			launcher_cmd=${launcher//[\%]REM[\%]/ }
			launcher_cmd=${launcher_cmd//[\%][\%]/\%}
			launcher_cmd=${launcher_cmd//[\%]s/${LAUNCHER_URL//\//\\/}}
			launcher_cmd=${launcher_cmd//[\%]s/\&}
			if [ "$WEBTAP_DRYRUN" = true ]; then
				echo "not tapping ... $launcher_cmd $LAUNCHER_URL"
				break
			else
				echo "tapping ... $launcher_cmd $LAUNCHER_URL ..."
				$launcher_cmd "$LAUNCHER_URL" && break 
				# on failure, continue to next in list
			fi
		done
	else
		echo "error: no tapper configured"
		exit 1
	fi
}

webtap_bookmarklet() {
	BOOKMARKLET_CODE="$1"
	echo "<html><head><script type='text/javascript'>${BOOKMARKLET_CODE##javascript:}</script></head><body>Webtap Bookmarklet</body></html>" > "$WEBTAP_HTML_FILE"
}

extract_keyword_target(){
	WEBTAP_URLITEM=$1
	WEBTAP_URLNAME=${WEBTAP_URLITEM%%|*}
	WEBTAP_URL=${WEBTAP_URLITEM##$WEBTAP_URLNAME\|}
	WEBTAP_URL=${WEBTAP_URL%%\|*}
	WEBTAP_URL=${WEBTAP_URL//[\%]REM[\%]/}
	WEBTAP_URLNAME=${WEBTAP_URLNAME//[\%]REM[\%]/}
	WEBTAP_SPACEPARM=${WEBTAPS_LIST[$id]//*space=*/TRUE}
	[ "$WEBTAP_SPACEPARM" = "TRUE" ] &&
		WEBTAP_URLSPACE=${WEBTAPS_LIST[$id]##*|%REM%space=}

	WEBTAP_URL=${WEBTAP_URL//[\%]s/$WEBTAPKEYWORD_PARMS}

	# create bookmarklet
	BOOKMARKLET=${WEBTAP_URL//*javascript:*/TRUE}
	if [ "$BOOKMARKLET" = "TRUE" ]; then
		BOOKMARKLET_URL=$WEBTAP_URL
		BOOKMARKLET_CODE="${BOOKMARKLET_URL//javascript:/}"
		webtap_bookmarklet "$BOOKMARKLET_CODE"
		WEBTAP_URL="$WEBTAP_HTML_FILE"
	fi

	echo $WEBTAP_URL
}

list_webtaps(){
	((id++))
	webtapkeyword_needskeyparm=${webtapkeyword_url//*\%s*/ \%s}
	webtapkeyword_needskeyparm=${webtapkeyword_needskeyparm%%|*}
	[ "${webtapkeyword_needskeyparm}" !=  " %s" ] &&
		webtapkeyword_needskeyparm=
	[ ! -z "$webtapkeyword_desc" ] &&
		kwdesc_field=" - $webtapkeyword_desc"
	echo "$id $webtapkeyword_name$webtapkeyword_needskeyparm$kwdesc_field"
	kwdesc_field=
}

list_keywords(){
	((id++))
	webtapkeyword_needskeyparm=${webtapkeyword_url//*\%s*/ \%s}
	webtapkeyword_needskeyparm=${webtapkeyword_needskeyparm%%|*}
	echo "$webtapkeyword_name"
}

validate_keywords(){
	INPUT_LIST=($1)
	WEBTAPURLS_TOTAL=${#INPUT_LIST[*]}
	WEBTAPKEYS_LIST=${USR_WEBTAPKEYWORD//[\,]/ }
	for user_keyword in $WEBTAPKEYS_LIST; do
		id=0
		while [ "$WEBTAPURLS_TOTAL" -ne "$id" ]; do
			keyword_name=${INPUT_LIST[$id]%%|*}
			keyword_name=${keyword_name//[\%]REM[\%]/ }
			keyword_match=${INPUT_LIST[$id]##$user_keyword[\%]REM[\%]\|*}
			if [ -z "$keyword_match" ]; then
				VALID_ID_LIST="$id"
				[ "$VALID_ID_LIST" != "$LAST_ID_LIST" ] && VALID_ID_LIST="$LAST_ID_LIST $id"
				LAST_ID_LIST="$VALID_ID_LIST"
			fi
			let id=${id}+1
		done
	done
	echo "$VALID_ID_LIST"
}

load_webtaps(){
	load_func="$1"
	id=0
	WEBTAPURLS_LIST=($(load_webtapfile "$WEBTAP_URLFILE"))
	for webtapkeyword in ${WEBTAPURLS_LIST[*]}; do
		webtapkeyword_item=${WEBTAPURLS_LIST[$id]%%|%REM%space=*}
		webtapkeyword_name=${webtapkeyword_item%%|*}
		webtapkeyword_desc=${webtapkeyword_item##*|}
		webtapkeyword_url=${webtapkeyword_item##$webtapkeyword_name\|}
		webtapkeyword_url=${webtapkeyword_url%%\|*}
		[ "$webtapkeyword_url" = "$webtapkeyword_desc" ] &&
			webtapkeyword_desc=
		webtapkeyword_name=${webtapkeyword_name//[\%]REM[\%]/}
		webtapkeyword_url=${webtapkeyword_url//[\%]REM[\%]/}
		webtapkeyword_desc=${webtapkeyword_desc//[\%]REM[\%]/ }
		webtapkeyword_desc=${webtapkeyword_desc## }
		$load_func
	done
}

filter_keyword_params(){
	if [ ! -z "$USR_WEBTAPKEYPARMS" ]; then
		WEBTAPKEYWORD_PARMS="$USR_WEBTAPKEYPARMS"
		if [ ! -z "$WEBTAP_URLSPACE" ]; then
			SPACE_FILTER="$WEBTAP_URLSPACE"
		else
			SPACE_FILTER="%20"
		fi
		WEBTAPKEYWORD_PARMS=${USR_WEBTAPKEYPARMS// /$SPACE_FILTER}
	else
		WEBTAPKEYWORD_PARMSVAR=${WEBTAP_URL//*\%s*/TRUE}
		if [ "$WEBTAPKEYWORD_PARMSVAR" = "TRUE" ]; then
			echo "keyword parameters required for $WEBTAP_URLNAME, see list."
			exit 1
		fi
	fi
}

open_webtap(){
	WEBTAPS_LIST=($(load_webtapfile "$WEBTAP_URLFILE"))
	KEYWORD_ID_LIST=($(validate_keywords "${WEBTAPS_LIST[*]}"))
	if [ "${#KEYWORD_ID_LIST[*]}" -lt 1 ]; then
		echo "invalid keyword(s): $USR_WEBTAPKEYWORD"
		exit 1
	fi
	for id in ${KEYWORD_ID_LIST[*]}; do
		filter_keyword_params
		WEBTAP_URL=$(extract_keyword_target "${WEBTAPS_LIST[$id]}")
		if [ -z "$WEBTAP_URL" ]; then
			echo "URL is empty!"
			exit 1
		fi
		webtap_launcher $WEBTAP_URL
	done
}

show_help(){
	date '+%Y' > "$DEV_NULL" 2>&1 && CURRENT_YEAR=$(date '+%Y') && COPYRIGHT="2008-$CURRENT_YEAR"
	cat <<-EOF
	Webtap - simple bookmarking system

	Version $VERSION, Copyright (C) $COPYRIGHT Kevin Wood <kevinw-at-fastmail-dot-fm>

	Webtap is free and provided WITHOUT WARRANTY!

	usage:
	 $(basename $0) [options] <action> ...
	
	actions:
	 open <keyword> <%s>		- specify keyword(s) and any additional parameters.
	 list 				- list keywords and their descriptions.
	 keywords			- list keywords only.

	options:
	 -c, --command <command> 	specify command to handle URL request(s).
	 --dry-run 			do nothing, only print commands.
	 -h, --help			display this help message.
	 -v, --version			display version information.

	 <keyword> can be multiple keywords enclosed in quotes, seperated by commas
	 (e.g. 'google, yahoo' %s).
EOF
}

argument=$@
[ $# -lt 1 ] && show_help

check_arg(){
	if [ -z "$1" ]; then
		echo "$bad_argument option requires an argument!"
		echo "Try '$(basename $0) --help' for more information."
		exit 1
	fi
}

sanity_check(){
	invalid_opt=${argumen//^[--]$*/}
	[ ! -z "$invalid_opt" ] && argument=
}

while [ $# -gt 0 ]; do
	[ $# -gt 1 ] && argument=$2
	bad_argument=$1
	case "$1" in
		-c|--command)		check_arg "$2"; WEBTAP_LAUNCHER="$2"; shift;;
		--dry-run) 		WEBTAP_DRYRUN=true;;
		-h|--help|help)		show_help; exit 0;;
		list) 			WEBTAP_KEYWORD="$2"; shift
					echo "# Keyword - Short description";
					load_webtaps list_webtaps; exit 0;;
		keywords)
					WEBTAP_KEYWORD="$2"; shift
					load_webtaps list_keywords
					exit 0
					;;
		open) 	 		check_arg "$2"; USR_WEBTAPKEYWORD="$2"; shift;
					USR_WEBTAPKEYPARMS="$2"; shift;;
		-v|--version)		echo "$(basename $0) version $VERSION"; exit 0;;
		--)			shift; break;;
		*)
					sanity_check
					echo "invalid option: $@"
					echo "Try '$(basename $0) --help' for more information."
					exit 1
					;;
	esac
	shift
done

if [ ! -z "$USR_WEBTAPKEYWORD" ]; then
	open_webtap "$USR_WEBTAPKEYPARMS"
fi

exit 0
